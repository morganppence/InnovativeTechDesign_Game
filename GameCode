<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Octopus Underwater Game</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background-color: #00aaff;
      font-family: Arial, sans-serif;
    }
    canvas {
      display: block;
    }
    #score {
      position: absolute;
      top: 10px;
      left: 10px;
      color: white;
      font-size: 24px;
    }
  </style>
</head>
<body>
  <div id="score">Score: 0</div>
  <canvas id="gameCanvas"></canvas>

  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    let score = 0;
    const scoreDisplay = document.getElementById("score");

    const octopus = {
      x: 100,
      y: canvas.height / 2,
      size: 40,
      color: "#ff6f61",
      dy: 0,
      gravity: 0.4, // Reduced gravity to make the octopus fall slower
      jumpPower: -8, // Reduced jump power for smoother jumps
      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.closePath();
      },
      update() {
        this.dy += this.gravity;
        this.y += this.dy;
        if (this.y + this.size > canvas.height) {
          this.y = canvas.height - this.size;
          this.dy = 0;
        } else if (this.y - this.size < 0) {
          this.y = this.size;
          this.dy = 0;
        }
      },
      jump() {
        this.dy = this.jumpPower;
      },
    };

    const obstacles = [];
    const obstacleWidth = 50;
    const obstacleGap = 250; // Increased gap between obstacles

    function createObstacle() {
      const height = Math.random() * (canvas.height / 2);
      obstacles.push({
        x: canvas.width,
        y: 0,
        width: obstacleWidth,
        height,
        color: "#005f73",
      });
      obstacles.push({
        x: canvas.width,
        y: height + obstacleGap,
        width: obstacleWidth,
        height: canvas.height - height - obstacleGap,
        color: "#005f73",
      });
    }

    function drawObstacles() {
      obstacles.forEach((obs) => {
        ctx.fillStyle = obs.color;
        ctx.fillRect(obs.x, obs.y, obs.width, obs.height);
      });
    }

    function updateObstacles() {
      obstacles.forEach((obs) => {
        obs.x -= 4; // Reduced obstacle speed
      });

      if (obstacles.length > 0 && obstacles[0].x + obstacleWidth < 0) {
        obstacles.splice(0, 2);
        score++;
        scoreDisplay.textContent = `Score: ${score}`;
      }
    }

    function detectCollision() {
      for (const obs of obstacles) {
        if (
          octopus.x + octopus.size > obs.x &&
          octopus.x - octopus.size < obs.x + obs.width &&
          octopus.y + octopus.size > obs.y &&
          octopus.y - octopus.size < obs.y + obs.height
        ) {
          return true;
        }
      }
      return false;
    }

    let frame = 0;
    let gameRunning = true;

    function gameLoop() {
      if (!gameRunning) return;

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      octopus.update();
      octopus.draw();

      if (frame % 120 === 0) { // Reduced frequency of new obstacles
        createObstacle();
      }

      drawObstacles();
      updateObstacles();

      if (detectCollision()) {
        gameRunning = false;
        alert(`Game Over! Final Score: ${score}`);
        document.location.reload();
      }

      frame++;
      requestAnimationFrame(gameLoop);
    }

    window.addEventListener("keydown", (e) => {
      if (e.code === "Space" && gameRunning) {
        octopus.jump();
      }
    });

    gameLoop();
  </script>
</body>
</html>
